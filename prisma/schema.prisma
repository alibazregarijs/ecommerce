generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Use the provider for your database, like "postgresql", "mysql", etc.
  url      = env("DATABASE_URL") // The URL of your database, usually provided in an environment variable
}

model User {
  id          Int        @id @default(autoincrement())
  fullName    String
  email       String     @unique
  password    String
  createdAt   DateTime   @default(now())

  // Relationships
  orders      Order[]    // One-to-many relationship with Order
  cart        Cart?      // One-to-one relationship with Cart
  seenProducts SeenProduct[] // One-to-many relationship with SeenProduct
  ratings     Rating[]   // One-to-many relationship with Rating (added)
}

model Rating {
  id         Int      @id @default(autoincrement())
  userId     Int
  productId  Int
  rating     Int      // Rating value (e.g., 1 to 5)
  createdAt  DateTime @default(now())

  // Relationships
  user       User     @relation(fields: [userId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])
  @@unique([userId, productId])
}

model Product {
  id              Int         @id @default(autoincrement())
  name            String
  slug            String      @unique
  description     String
  price           Float
  quantity        Int
  inStock         Boolean     @default(true)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  sizes           Size[]      // Array of available sizes
  color           Color       @default(BROWN)
  images          String[]    // Store multiple image URLs as an array
  discountId      Int?        // Optional foreign key for Discount
  discountedPrice Float?      // Optional discounted price

  // Relationships
  categories      Category[]  
  orderItems      OrderItem[] 
  cartItems       CartItem[]  
  seenProducts    SeenProduct[] 
  discount        Discount?   @relation(fields: [discountId], references: [id]) 
  ratings         Rating[]    
}


model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  products  Product[] // Many-to-many relationship with Products
}

model Discount {
  id          Int       @id @default(autoincrement())
  percentage  Float?    
  startDate   DateTime? 
  endDate     DateTime? 
  createdAt   DateTime  @default(now())

  // Relationships
  products    Product[] // Many-to-many relationship with Products
}

model Order {
  id         Int        @id @default(autoincrement())
  userId     Int
  totalPrice Float
  status     OrderStatus @default(PENDING)
  createdAt  DateTime   @default(now())

  // Relationships
  user       User       @relation(fields: [userId], references: [id])
  items      OrderItem[] // One-to-many relationship with OrderItems
}

model OrderItem {
  id         Int      @id @default(autoincrement())
  orderId    Int
  productId  Int
  quantity   Int
  price      Float

  // Relationships
  order      Order   @relation(fields: [orderId], references: [id])
  product    Product @relation(fields: [productId], references: [id])
}

model Cart {
  id       Int      @id @default(autoincrement())
  userId   Int      @unique
  items    CartItem[] // One-to-many relationship with CartItems

  // Relationships
  user     User    @relation(fields: [userId], references: [id]) // One-to-one relationship with User
}

model CartItem {
  id         Int      @id @default(autoincrement())
  cartId     Int
  productId  Int
  quantity   Int

  // Relationships
  cart       Cart    @relation(fields: [cartId], references: [id]) // One-to-many relationship with Cart
  product    Product @relation(fields: [productId], references: [id]) // One-to-many relationship with Product
}

model SeenProduct {
  id        Int      @id @default(autoincrement()) // Unique ID for each viewed product
  userId    Int?     // Nullable for guest users
  productId Int      // Product being viewed
  viewedAt  DateTime @default(now()) // Timestamp when the product was viewed

  // Relationships
  user      User?    @relation(fields: [userId], references: [id]) // Optional relation for guest views
  product   Product  @relation(fields: [productId], references: [id]) // Required relation with Product
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum Size {
  S
  M
  L
  XL
}

enum Color {
  BROWN
  GREEN
  BLUE
}
