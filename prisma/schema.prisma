generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int        @id @default(autoincrement())
  fullName    String
  email       String     @unique
  password    String
  createdAt   DateTime   @default(now())

  // Relationships
  orders      Order[]
  cart        Cart?
  seenProducts SeenProduct[]
  ratings     Rating[]
  comments    Comment[]
  likes       Like[]
}

model Product {
  id              Int         @id @default(autoincrement())
  name            String
  slug            String      @unique
  description     String
  price           Float
  quantity        Int
  inStock         Boolean     @default(true)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  sizes           Size[]
  color           Color       @default(BROWN)
  images          String[]
  discountId      Int?
  discountedPrice Float?

  // Relationships
  categories      Category[]
  orderItems      OrderItem[]
  cartItems       CartItem[]
  seenProducts    SeenProduct[]
  discount        Discount?   @relation(fields: [discountId], references: [id])
  ratings         Rating[]
  comments        Comment[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  content   String?
  createdAt DateTime @default(now())

  // Relationships
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  likes     Like[]
  ratings   Rating[] // Support for comment ratings
}

model Rating {
  id         Int      @id @default(autoincrement())
  userId     Int
  productId  Int?     // Nullable: Rating could be for a product or a comment
  commentId  Int?     // Nullable: Rating could be for a comment or a product
  rating     Int      // Rating value (e.g., 1 to 5)
  createdAt  DateTime @default(now())

  // Relationships
  user       User     @relation(fields: [userId], references: [id])
  product    Product? @relation(fields: [productId], references: [id]) // Nullable for comment rating
  comment    Comment? @relation(fields: [commentId], references: [id]) // Nullable for product rating

  @@unique([userId, productId]) // A user can rate a product only once
  @@unique([userId, commentId]) // A user can rate a comment only once
}


model Like {
  id        Int      @id @default(autoincrement())
  userId    Int
  commentId Int

  like      Boolean  @default(false) // Like status (true = liked)
  createdAt DateTime @default(now())
  
  // Relationships
  user      User     @relation(fields: [userId], references: [id])
  comment   Comment  @relation(fields: [commentId], references: [id])

  @@unique([userId, commentId]) // A user can like a comment only once
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  products  Product[]
}

model Discount {
  id          Int       @id @default(autoincrement())
  percentage  Float?    
  startDate   DateTime? 
  endDate     DateTime? 
  createdAt   DateTime  @default(now())

  // Relationships
  products    Product[]
}

model Order {
  id         Int        @id @default(autoincrement())
  userId     Int
  totalPrice Float
  status     OrderStatus @default(PENDING)
  createdAt  DateTime   @default(now())

  // Relationships
  user       User       @relation(fields: [userId], references: [id])
  items      OrderItem[]
}

model OrderItem {
  id         Int      @id @default(autoincrement())
  orderId    Int
  productId  Int
  quantity   Int
  price      Float

  // Relationships
  order      Order   @relation(fields: [orderId], references: [id])
  product    Product @relation(fields: [productId], references: [id])
}

model Cart {
  id       Int      @id @default(autoincrement())
  userId   Int      @unique
  items    CartItem[]

  // Relationships
  user     User    @relation(fields: [userId], references: [id])
}

model CartItem {
  id         Int      @id @default(autoincrement())
  cartId     Int
  productId  Int
  quantity   Int
  size       Size
  createdAt  DateTime @default(now())

  // Relationships
  cart       Cart    @relation(fields: [cartId], references: [id])
  product    Product @relation(fields: [productId], references: [id])
}

model SeenProduct {
  id        Int      @id @default(autoincrement())
  userId    Int?
  productId Int
  viewedAt  DateTime @default(now())

  // Relationships
  user      User?    @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum Size {
  S
  M
  L
  XL
}

enum Color {
  BROWN
  GREEN
  BLUE
}
